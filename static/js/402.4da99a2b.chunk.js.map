{"version":3,"file":"static/js/402.4da99a2b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Characters/Characters.module.css?1e2f","pages/Characters/Characters.jsx","../node_modules/nanoid/index.browser.js","service/api.js","shared/hooks/useLocalStorage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\",\"field\":\"Filter_field__IlYZE\",\"text\":\"Filter_text__uqQRu\",\"iconContainer\":\"Filter_iconContainer__rVlMA\",\"icon_search\":\"Filter_icon_search__iY3xd\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from \"../Filter/Filter.module.css\";\n\nconst Filter = ({ value, onChange }) => (\n<div className={style.container}>\n    <div className={style.field}>\n        <span className={style.iconContainer}>\n            <svg className={style.icon_search} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M15.5 15H14.71L14.43 14.73C15.41 13.59 16 12.11 16 10.5C16 6.91 13.09 4 9.5 4C5.91 4 3 6.91 3 10.5C3 14.09 5.91 17 9.5 17C11.11 17 12.59 16.41 13.73 15.43L14 15.71V16.5L19 21.49L20.49 20L15.5 15ZM9.5 15C7.01 15 5 12.99 5 10.5C5 8.01 7.01 6 9.5 6C11.99 6 14 8.01 14 10.5C14 12.99 11.99 15 9.5 15Z\" fill=\"black\" fillOpacity=\"0.54\"/>\n            </svg>\n        </span>\n        <label>\n            <input className={style.text} type=\"text\" autoComplete=\"off\" autoFocus placeholder=\"Filter by name...\" value={value} onChange={onChange} />   \n        </label>\n    </div>\n</div>\n);\n\nexport default Filter;\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"picture\":\"Characters_picture__WTKwM\",\"container\":\"Characters_container__pLArP\",\"gallery\":\"Characters_gallery__Xdkt9\",\"list\":\"Characters_list__ZLTyH\",\"item\":\"Characters_item__SWoud\",\"hero\":\"Characters_hero__WafPG\",\"avatar\":\"Characters_avatar__fs2qF\",\"about\":\"Characters_about__8XDhL\",\"title_elements\":\"Characters_title_elements__ZyTlM\",\"text_name\":\"Characters_text_name__h0fwR\",\"text_species\":\"Characters_text_species__KJ-kZ\",\"btnPart\":\"Characters_btnPart__5HSob\",\"loadMoreBtn\":\"Characters_loadMoreBtn__VwkoJ\",\"icon_from\":\"Characters_icon_from__sA75I\"};","import { useState, useEffect } from 'react';\nimport { Link, useLocation } from \"react-router-dom\";\nimport { getCharacters } from \"../../service/api\";\nimport Filter from \"../../components/Filter/Filter\";\nimport { nanoid } from 'nanoid';\nimport useLocalStorage from \"../../shared/hooks/useLocalStorage\";\n\nimport style from \"../Characters/Characters.module.css\";\n\nconst Characters = () => {\n    const [characters, setCharacters] = useLocalStorage(\"characters\", []);\n    const [pageNumber, setPageNumber] = useLocalStorage(\"pageNumber\", \"1\");\n    const [filter, setFilter] = useLocalStorage(\"filter\", \"\");\n    const [error, setError] = useState(\"\");\n    const location = useLocation();\n\n\nuseEffect(() => {\n    if (pageNumber > 42) {\n        return;\n    }\n    try {\n        getCharacters(pageNumber).then( resp => {\n            const characters = resp.map(({id, name, status, species, gender, origin, type, image}) => {\n                return {id, name, status, species, gender, image, origin, type};\n            })\n            setCharacters(prevState => [...prevState, ...characters]);\n        })\n    } catch (error) {\n        setError(error);\n    } \n}, [setCharacters, pageNumber]);\n\nconst handleIncrement = () => {\n    setPageNumber(PrevNumber => PrevNumber + 1);\n} \n\nconst changeFilter = event => {\n    setFilter(event.currentTarget.value);\n};\n\nconst getVisibleContacts = () => {\n    const lowerCaseFilter = filter.toLowerCase();\n    const sortCharacters = characters.filter(character => character.name.toLowerCase().includes(lowerCaseFilter));\n    const charactersInAlphabetOrder = [...sortCharacters].sort((firstName, secondName) => firstName.name.localeCompare(secondName.name));\n    return charactersInAlphabetOrder;\n};\n\nconst visibleCharacters = getVisibleContacts();\n    \n    return (\n    <div className={style.container}>\n        <div className={style.picture} />\n        <Filter value={filter} onChange={changeFilter}/>\n        <div className={style.gallery}>\n            <ul className={style.list}>\n                {visibleCharacters.map(({id, name, species, image}) => (\n                    <li className={style.item} key={nanoid()}>\n                        <Link className={style.link} to={`character/${id}`} state={{ from: location }}>\n                            <div className={style.hero}>\n                                <div style={{ '--bg-image': `url(${image})` }} className={style.avatar}></div>\n                                <div className={style.about}>\n                                    <div className={style.title_elements}>\n                                        <p className={style.text_name}>{name}</p>\n                                        <p className={style.text_species}>{species}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n        {(pageNumber <= 42) && \n        <div className={style.btnPart}>\n            <button  type=\"button\" onClick={handleIncrement} className={style.loadMoreBtn}>Load more</button>\n            <svg className={style.icon_from} width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z\" fill=\"black\"/>\n            </svg>\n        </div>}\n        {(pageNumber === 42) &&\n        <p>You've reached the end of search results.</p>}\n        {error &&  <p>Error</p>}\n    </div>\n    );\n    };\n    \n    export default Characters;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import axios from 'axios';\n\nconst URL = 'https://rickandmortyapi.com/api';\n\naxios.defaults.baseURL = URL;\n\nexport const getCharacters= async (pageNumber) => {\nconst response = await axios(`/character/?page=${pageNumber}`);\n\nreturn response.data.results;\n};\n\nexport const getCharactersById = async (id) => {\nconst response = await axios(`/character/${id}`);\n\nreturn response.data;\n};\n","import {useState, useEffect} from \"react\";\n\nconst useLocalStorage = (key, defaultValue) => {\n    const [state, setState] = useState(()=> {\n        try {\n            const result = JSON.parse(localStorage.getItem(key));\n            return result ? result : defaultValue;\n        }\n        catch(error) {\n            return defaultValue;\n        }\n    })\n\n    useEffect(()=> {\n        localStorage.setItem(key, JSON.stringify(state));\n    }, [state, key]);\n\n    return [state, setState];\n}\n\nexport default useLocalStorage;"],"names":["value","onChange","className","style","width","height","viewBox","fill","xmlns","d","fillOpacity","type","autoComplete","autoFocus","placeholder","useLocalStorage","characters","setCharacters","pageNumber","setPageNumber","filter","setFilter","useState","error","setError","location","useLocation","useEffect","getCharacters","then","resp","map","id","name","status","species","gender","origin","image","prevState","visibleCharacters","lowerCaseFilter","toLowerCase","sortCharacters","character","includes","sort","firstName","secondName","localeCompare","getVisibleContacts","event","currentTarget","to","state","from","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","onClick","PrevNumber","axios","response","data","results","getCharactersById","key","defaultValue","result","JSON","parse","localStorage","getItem","setState","setItem","stringify"],"sourceRoot":""}